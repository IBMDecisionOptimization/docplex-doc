.. _samples:

Examples of Mathematical Programming
====================================

Downloading the examples
------------------------

The examples can be downloaded from gitHub `here <https://github.com/IBMDecisionOptimization/docplex-examples>`_.

Examples content and source
---------------------------

The sample archive ``docplex_examples.zip`` contains
subdirectories for different sample categories:

* ``examples\modeling`` contains examples that target modeling.

	* :doc:`diet </diet>`: This example solves a simple variation of the well-known
	  diet problem that was posed by George Stigler and George Dantzig. How does a planner
	  choose foods that satisfy nutritional requirements while minimizing costs or
	  maximizing satiety?
	* :doc:`production </production>`: This example solves a production planning problem.
	  How does a company decide what proportion of its products to produce
	  inside the company and what to buy from outside the company?
	* :doc:`sport_scheduling </sport_scheduling>`: How can a sports league schedule matches between
	  teams in different divisions such that the teams play each other the 
	  appropriate number of times and maximize the objective of scheduling 
	  intradivision matches as late as possible in the season?
	* :doc:`nurses </nurses>`: This example solves the problem of finding an optimal
	  assignment of nurses to shifts.

* ``examples\workflow`` contains examples that target optimization workflow.

	* :doc:`cutstock </cutstock>`: The cutting stock problem in this example is sometimes known in math programming terms as a knapsack problem with reduced
	  cost in the objective function. Generally, a cutting stock problem begins with a supply of rolls of material of fixed length (the stock).
	  Strips are cut from these rolls. All the strips that are cut from one roll are known together as a pattern.
	  The point of this example is to use as few rolls of stock as possible to satisfy some specified demand of strips.
	* :doc:`lagrangian_relaxation </lagrangian_relaxation>`: This example solves the generalized
	  assignment problem, with or without Lagrangian relaxation.
	* :doc:`load_balancing </load_balancing>`: This example looks at cloud load balancing to keep a service running 
	  in the cloud at reasonable cost by reducing the expense of running cloud servers while
	  minimizing risk and human time due to rebalancing and doing balance sleeping models
	  across servers.

* ``examples\ipython`` contains IPython notebooks, working on `datascientistworkbench <https://www.datascientistworkbench.com>`_

    * :doc:`campsite </campsite>`: Selecting the ideal camping site requires careful consideration of many factors such as the proximity to water, availability of firewood, and protection from the elements.
    * :doc:`kmedian </kmedian>`: Finding pseudo centers in a cloud of points.
    * :doc:`matchmaker </matchmaker>`: Pairing off men and women in hopes of long and successful relationships.
    * :doc:`warehouse </warehouse>`: Given a set of candidate warehouse locations and a set of stores, decide which warehouse to open and which warehouse will server which store.
    * :doc:`whiskas </whiskas>`: Producing cat food products as cheaply as possible while ensuring they meet the stated nutritional analysis requirements shown on the cans.
    * :doc:`n_c </n_c>`: Tic-Tac-Toe grid in 3 dimension to fill with 14 white balls and 13 black balls.


.. _EngineSetup:

Engine setup
---------------

Before you run the examples, you need to set up an optimization engine. The
examples are written so that they use the IBM ILOG CPLEX Optimization Studio on your computer if the product
is installed or will solve on the IBM Decision Optimization on Cloud service if CPLEX is not found.

Using the  IBM Decision Optimization on Cloud service
.....................................................

1. Register for a trial account.
 
    Register for the DOcloud free trial and use it free for 30 days. See 
    `Free trial <https://developer.ibm.com/docloud/try-docloud-free>`_.
 
2. Get your API key.
 
    With your free trial, you can generate a key to access the DOcloud API. 
    Go to the 
    `Get API key & base URL <http://developer.ibm.com/docloud/docs/api-key/>`_ 
    page to generate the key after you register. This page also contains 
    the base URL you must use for DOcloud.
    
3. The examples rely on you specifying the api_key either in the sample
   ``.py`` file or in a resource file in your HOME directory.
   
   a. Create a ``.docplexrc`` file in your HOME directory and insert the following
      lines: ::
      
	      url: YOUR_DOCLOUD_URL
	      api_key: YOUR_API_KEY_HERE
      
   b. Edit each sample ``.py`` file. Look for: ::
      
	    """DOcloud credentials can be specified here with url and api_key.
	    
	    Alternatively, if api_key is None, DOcloudContext.make_default_context()
	    looks for a .docplexrc file in your home directory. That file contains the
	    credentials and other properties.
	    """
	    url = "YOUR_URL_HERE"
	    api_key = None
	    
      Edit your url and api_key.


Using IBM ILOG CPLEX Optimization Studio V12.6.2 on your computer
.............................................

If you have IBM ILOG CPLEX Optimization Studio V12.6.2 installed, you need to add
``<cosdir>/<cplexdir>/python/<python_version>/<platform>`` to your PYTHONPATH.

* ``<cos>`` is your CPLEX Optimization Studio installation directory.
* ``<cplexdir>`` is your CPLEX installation directory.
* ``<python_version>`` is:

   * 2.7 if your python version is 2.7
   * 3.4 if your python version is 3.4

* ``<platform>`` is:

   * ``x64_win64`` if your operating system is Windows
   * ``x86-64_linux`` if your operating system is Linux

Note that if CPLEX is in the PYTHONPATH, then it overrides the DOcloud credentials and solves locally, unless you use 
``solve_cloud`` instead of the standard methods.

Running the examples
--------------------

Examples files are Python scripts that contain problem data.
Debug traces and warnings are included in the examples to help you diagnose the cloud or local solve and
to give a brief overview of your installation (Is CPLEX in the path?, Is ``matplolib`` installed?...).
Running a sample submits the problem to the optimization engine and displays the result.

For instance, to run :doc:`diet </diet>`, type the following command at a command prompt::

	c:\docplex\examples\modeling> python diet.py
	* model solved as function with objective: 2.69041
	1> Servings of ({Spaghetti W/ Sauce}) = 2.155
	2> Servings of ({Chocolate Chip Cookies}) = 10.000
	3> Servings of ({2% Lowfat Milk}) = 1.831
	4> Servings of ({Hotdog}) = 0.930
	* KPI: Total Calories=2000.000
	* KPI: Total Calcium=800.000
	* KPI: Total Iron=11.278
	* KPI: Total Vit_A=8518.433
	* KPI: Total Dietary_Fiber=25.000
	* KPI: Total Carbohydrates=256.806
	* KPI: Total Protein=51.174

